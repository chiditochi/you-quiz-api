 Notifications
 1. Register 
    send notification to User and Admin|Manager
 2. Test & Question Creation 
    send notification to creator
 3. TestResult 
    send notification to TestCreator  & Student|User 

Register Template 
Dear { fullName of Admin| Manager},
{ user fullName} with email has registered as a { userrole type }
Regards

TestQuestion Template 
Dear { fullName of test creator},
You just created a { if timed, duration minutes} test in category { testCategory } with {questionCount} questions.
Regards

TestResult Template for Student|User
Dear { fullName },
Thanks for taking the { categoryName } test.
You scored { score }.
Regards

TestResult Template for Teacher ie TestCreator
Dear { fullName },
{ fullName of Student|User} has taken the { categoryName } test.
Regards

 ------------------------------------------------------------
            const opt: EmailMessageOptions = {
                subject: `Registration`,
                to: [''],
                text: "",
                html: getRegisterEmailTemplate({
                    user: {
                        fullName: getUserFullName(newDBUser),
                        email: newDBUser.profile.email,
                        roleName: getEnumValue(USERROLE, roles)
                    }
                } as IRegisterEmailTemplate),
                attachment: []
            };
            AppEvents.emit("sendRegisterEmail", opt)
------------------------------------------------------------

     const opt: EmailMessageOptions = {
        subject: `${APP_NAME} APP`,
        to: ['chiditochi@yahoo.com', 'alasoharriet06@gmail.com'],
        text: "",
        html: `
        Dear Lord, <br/>
        You are God and will always be<br/>
        Lord bless and give Harriet and I peace.<br/>
        Hear our prayers this day.<br/>
        Amen!
        `,
        attachment: [{
            path: path.join(__dirname, 'assets', 'you-quiz-question-template.xlsx'),
            type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            name: `${APP_NAME}-Template.xlsx`
        }]
    };
    //app.appEvents.emit('sendEmail', opt);

 --------------------------------------------------------------------------------
            const validateKeys = validateCreationDataKeys(Object.keys(user), requiredFields)
            const validateValues = validateCreationDataValues(user, requiredFields);

            if (validateKeys.length > 0 || validateValues.length > 0) throw new Error(`missing properties: ${validateKeys.length === 0 ? 0 : validateKeys.join(',')} ; invalid values: ${validateValues.length === 0 ? 0 : validateValues.join(',')}`);

            const { firstName, lastName, password, roles, email, gender } = user;
----------------------------------------------------------------


Model.populate('modelName')
Model.populate({
    path: string,
    select: { field: 0|1},
    match: string | Model,
    populate: { path: string, select: { field: 0|1}, match: , populate: { }}
})

query.populate('refName').execPopulate();
query.populated('refName') : boolean 
query.depopulate('refName')


const [test, question] = await Promise.all(
    [DB.models.Test.findById(currentUserId),
    DB.models.Question.findById(currentUserId).populate('test', { creator: 1 })]
);

function generateAnswer(size : number =1, max : number=4): string[]{
    let a : string[]= [];
    let options = 'A B C D'.split(' ')
    for(var i = 0; i < size; i++){
        let c = Math.floor(Math.random() * max);
        a.push(options[c])
    }
    return a;
}

function getPrescriptionTime(span=10){   
   const label = 'prescriptionTime';
   const lastPrescription = window.localStorage.getItem('prescriptionTime');
   let h = 0; 
   let period = '';
   if(lastPrescription)
        [ h, period ] = lastPrescription.split(' ');
   const currentH = new Date().getHours()
   if(!lastPrescription){
       const pe = currentH >= 12 && currentH < 24 ? currentH + ' pm': currentH + ' am';
       window.localStorage.setItem('prescriptionTime', pe);
       return;
   }
   h = parseInt(h);
   
   const process = (
   (currentH < 12 && currentH > h && period.toLowerCase()==='am') || 
   (currentH < 24 && currentH > h && period.toLowerCase()==='pm'))? true: false;
   if(process){
   h += period.toLowerCase() === 'pm' && h < 12 ? 12 : 0;
   h += span;
   const newtime = (h >= 24) ? (h - 24) + " am" : 
           ((h > 12) ? h + ' pm' : h + ' am');
   console.log(newtime)
    window.localStorage.setItem('prescriptionTime', newtime);
    }else{
        console.log(window.localStorage.getItem('prescriptionTime'));
    }
 }

getPrescriptionTime()
